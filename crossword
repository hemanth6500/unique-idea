
Crossword:
# Ways to calculate the number of possible ways to fill the grid
ways = 0

# Function used to print the resultant matrix
def printMatrix(matrix, n):
	for i in range(n):
		print(matrix[i])

# Function to check if the word can be placed horizontally
def checkHorizontal(x, y, matrix, currentWord):
	n = len(currentWord)

	for i in range(n):
		if matrix[x][y + i] == '#' or matrix[x][y + i] == currentWord[i]:
			matrix[x] = matrix[x][:y + i] + currentWord[i] + matrix[x][y + i + 1:]
		else:

			# This shows that word cannot
			# Be placed horizontally
			matrix[0] = "@"
			return matrix
	return matrix

# Function to check if current word can be placed vertically
def checkVertical(x, y, matrix, currentWord):
	n = len(currentWord)

	for i in range(n):
		if matrix[x + i][y] == '#' or matrix[x + i][y] == currentWord[i]:
			matrix[x + i] = matrix[x + i][:y] + currentWord[i] + matrix[x + i][y + 1:]
		else:

			# This shows that word
			# Cannot be placed vertically
			matrix[0] = "@"
			return matrix
	return matrix

# This function recursively checks for every word that can align vertically in one loop
# and in another loop it checks for those words that can align horizontally
# words -> it contains all the words to fill in a crossword puzzle
# matrix -> it contain the current state of crossword
# index -> it represent the index of current word
#n -> Represents the length of row or column of the sqaure matrix
def solvePuzzle(words, matrix, index, n):
	global ways
	if index < len(words):
		currentWord = words[index]
		maxLen = n - len(currentWord)

		# Loop to check the words that can align vertically.
		for i in range(n):
			for j in range(maxLen + 1):
				temp = checkVertical(j, i, matrix.copy(), currentWord)
				if temp[0] != "@":
					solvePuzzle(words, temp, index + 1, n)

		# Loop to check the words that can align horizontally.
		for i in range(n):
			for j in range(maxLen + 1):
				temp = checkHorizontal(i, j, matrix.copy(), currentWord)
				if temp[0] != "@":
					solvePuzzle(words, temp, index + 1, n)
	else:

		#to print the crossword puzzle
		print(str(ways + 1) + " way to solve the puzzle ")
		printMatrix(matrix, n)
		print()

		# Increase the ways
		ways += 1
		return

# Driver Code
if _name_ == '_main_':
	# Length of grid
	n1 = 10

	# Matrix to hold the grid of puzzle
	matrix = []

	# Take input of puzzle in matrix by input grid of size n1 x n1
	matrix.append("#*")
	matrix.append("#*")
	matrix.append("##")
	matrix.append("####")
	matrix.append("##")
	matrix.append("##")
	matrix.append("##")
	matrix.append("#######*")
	matrix.append("#*")
	matrix.append("*#######")

	words = []

	# The words matrix will hold all the words need to be filled in the grid
	words.append("PUNJAB")
	words.append("JHARKHAND")
	words.append("MIZORAM")
	words.append("MUMBAI")


	# Initialize the number of ways to solve the puzzle to zero
	ways = 0


	# Recursive function to solve the puzzle where 0 is the initial index of words array
	# n1 is length of grid
	solvePuzzle(words, matrix, 0, n1)
	print("Number of ways to fill the grid is " + str(ways))
